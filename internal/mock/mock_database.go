// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/database.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/database.go -destination=./internal/mock/mock_database.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-users/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDatabasePort is a mock of UserDatabasePort interface.
type MockUserDatabasePort struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabasePortMockRecorder
	isgomock struct{}
}

// MockUserDatabasePortMockRecorder is the mock recorder for MockUserDatabasePort.
type MockUserDatabasePortMockRecorder struct {
	mock *MockUserDatabasePort
}

// NewMockUserDatabasePort creates a new mock instance.
func NewMockUserDatabasePort(ctrl *gomock.Controller) *MockUserDatabasePort {
	mock := &MockUserDatabasePort{ctrl: ctrl}
	mock.recorder = &MockUserDatabasePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatabasePort) EXPECT() *MockUserDatabasePortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserDatabasePort) CreateUser(ctx context.Context, req *port.CreateUserRequest) (*port.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*port.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserDatabasePortMockRecorder) CreateUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserDatabasePort)(nil).CreateUser), ctx, req)
}

// GetUserByEmail mocks base method.
func (m *MockUserDatabasePort) GetUserByEmail(ctx context.Context, req *port.GetUserByEmailRequest) (*port.GetUserByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, req)
	ret0, _ := ret[0].(*port.GetUserByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserDatabasePortMockRecorder) GetUserByEmail(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserDatabasePort)(nil).GetUserByEmail), ctx, req)
}

// MockSecurityImageDatabasePort is a mock of SecurityImageDatabasePort interface.
type MockSecurityImageDatabasePort struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityImageDatabasePortMockRecorder
	isgomock struct{}
}

// MockSecurityImageDatabasePortMockRecorder is the mock recorder for MockSecurityImageDatabasePort.
type MockSecurityImageDatabasePortMockRecorder struct {
	mock *MockSecurityImageDatabasePort
}

// NewMockSecurityImageDatabasePort creates a new mock instance.
func NewMockSecurityImageDatabasePort(ctrl *gomock.Controller) *MockSecurityImageDatabasePort {
	mock := &MockSecurityImageDatabasePort{ctrl: ctrl}
	mock.recorder = &MockSecurityImageDatabasePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityImageDatabasePort) EXPECT() *MockSecurityImageDatabasePortMockRecorder {
	return m.recorder
}

// GetSecurityImage mocks base method.
func (m *MockSecurityImageDatabasePort) GetSecurityImage(ctx context.Context, req *port.GetSecurityImageRequest) (*port.GetSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityImage", ctx, req)
	ret0, _ := ret[0].(*port.GetSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityImage indicates an expected call of GetSecurityImage.
func (mr *MockSecurityImageDatabasePortMockRecorder) GetSecurityImage(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityImage", reflect.TypeOf((*MockSecurityImageDatabasePort)(nil).GetSecurityImage), ctx, req)
}

// SaveSecurityImage mocks base method.
func (m *MockSecurityImageDatabasePort) SaveSecurityImage(ctx context.Context, image *port.SaveSecurityImageRequest) (*port.SaveSecurityImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecurityImage", ctx, image)
	ret0, _ := ret[0].(*port.SaveSecurityImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSecurityImage indicates an expected call of SaveSecurityImage.
func (mr *MockSecurityImageDatabasePortMockRecorder) SaveSecurityImage(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecurityImage", reflect.TypeOf((*MockSecurityImageDatabasePort)(nil).SaveSecurityImage), ctx, image)
}
