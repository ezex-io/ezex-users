// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/port/service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/port/service.go -destination=./internal/mock/mock_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/ezex-io/ezex-users/internal/port"
	gomock "go.uber.org/mock/gomock"
)

// MockServicePort is a mock of ServicePort interface.
type MockServicePort struct {
	ctrl     *gomock.Controller
	recorder *MockServicePortMockRecorder
	isgomock struct{}
}

// MockServicePortMockRecorder is the mock recorder for MockServicePort.
type MockServicePortMockRecorder struct {
	mock *MockServicePort
}

// NewMockServicePort creates a new mock instance.
func NewMockServicePort(ctrl *gomock.Controller) *MockServicePort {
	mock := &MockServicePort{ctrl: ctrl}
	mock.recorder = &MockServicePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicePort) EXPECT() *MockServicePortMockRecorder {
	return m.recorder
}

// ProcessLogin mocks base method.
func (m *MockServicePort) ProcessLogin(ctx context.Context, req *port.ProcessLoginRequest) (*port.ProcessLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLogin", ctx, req)
	ret0, _ := ret[0].(*port.ProcessLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessLogin indicates an expected call of ProcessLogin.
func (mr *MockServicePortMockRecorder) ProcessLogin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLogin", reflect.TypeOf((*MockServicePort)(nil).ProcessLogin), ctx, req)
}
