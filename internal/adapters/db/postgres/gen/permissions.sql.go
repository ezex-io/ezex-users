// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPermissionByScopeAction = `-- name: GetPermissionByScopeAction :one
SELECT id, name, description, scope, action FROM permissions
WHERE scope = $1 AND action = $2
`

type GetPermissionByScopeActionParams struct {
	Scope  string `json:"scope"`
	Action string `json:"action"`
}

func (q *Queries) GetPermissionByScopeAction(ctx context.Context, arg GetPermissionByScopeActionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByScopeAction, arg.Scope, arg.Action)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Scope,
		&i.Action,
	)
	return i, err
}

const upsertPermission = `-- name: UpsertPermission :one
INSERT INTO permissions (name, description, scope, action)
VALUES ($1, $2, $3, $4)
ON CONFLICT (scope, action) DO UPDATE
    SET name = EXCLUDED.name,
        description = EXCLUDED.description
RETURNING id, name, description, scope, action
`

type UpsertPermissionParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Scope       string      `json:"scope"`
	Action      string      `json:"action"`
}

func (q *Queries) UpsertPermission(ctx context.Context, arg UpsertPermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, upsertPermission,
		arg.Name,
		arg.Description,
		arg.Scope,
		arg.Action,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Scope,
		&i.Action,
	)
	return i, err
}
