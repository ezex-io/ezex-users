// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package gen

import (
	"context"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (id, name, is_system, is_default)
VALUES (gen_random_uuid(), $1, $2, $3)
ON CONFLICT (name) DO NOTHING
`

type CreateRoleParams struct {
	Name      string `json:"name"`
	IsSystem  bool   `json:"is_system"`
	IsDefault bool   `json:"is_default"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole, arg.Name, arg.IsSystem, arg.IsDefault)
	return err
}

type CreateRolesParams struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	IsSystem  bool   `json:"is_system"`
	IsDefault bool   `json:"is_default"`
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, is_system, is_default, created_by_id, created_at, updated_by_id, updated_at, deleted_by_id, deleted_at FROM roles
WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.IsDefault,
		&i.CreatedByID,
		&i.CreatedAt,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.DeletedByID,
		&i.DeletedAt,
	)
	return i, err
}

const grantRole = `-- name: GrantRole :exec
INSERT INTO user_roles (user_id, role_id, granted_by_id, granted_at)
SELECT
    $1,
    $2,
    $3,
    now()
FROM users u, roles r
WHERE u.email = $4
ON CONFLICT DO NOTHING
`

type GrantRoleParams struct {
	UserID      string `json:"user_id"`
	RoleID      string `json:"role_id"`
	GrantedByID string `json:"granted_by_id"`
	Email       string `json:"email"`
}

func (q *Queries) GrantRole(ctx context.Context, arg GrantRoleParams) error {
	_, err := q.db.Exec(ctx, grantRole,
		arg.UserID,
		arg.RoleID,
		arg.GrantedByID,
		arg.Email,
	)
	return err
}
