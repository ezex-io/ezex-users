// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, username, password, status, created_at, created_by_id, updated_at)
VALUES (
           gen_random_uuid(), $1, $2, $3, $4,
           now(), $5, now()
       ) ON CONFLICT (email) DO NOTHING
`

type CreateUserParams struct {
	Email       string          `json:"email"`
	Username    string          `json:"username"`
	Password    pgtype.Text     `json:"password"`
	Status      UsersStatusEnum `json:"status"`
	CreatedByID pgtype.Text     `json:"created_by_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Status,
		arg.CreatedByID,
	)
	return err
}

const createUserWithID = `-- name: CreateUserWithID :exec
INSERT INTO users (id, email, username, password, status, created_at, created_by_id, updated_at)
VALUES (
           $1, $2, $3, $4, $5,
           now(), $6, now()
       ) ON CONFLICT (email) DO NOTHING
`

type CreateUserWithIDParams struct {
	ID          string          `json:"id"`
	Email       string          `json:"email"`
	Username    string          `json:"username"`
	Password    pgtype.Text     `json:"password"`
	Status      UsersStatusEnum `json:"status"`
	CreatedByID pgtype.Text     `json:"created_by_id"`
}

func (q *Queries) CreateUserWithID(ctx context.Context, arg CreateUserWithIDParams) error {
	_, err := q.db.Exec(ctx, createUserWithID,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Status,
		arg.CreatedByID,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, username, password, status, created_at, created_by_id, updated_at, updated_by_id, deleted_at, deleted_by_id from users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedAt,
		&i.UpdatedByID,
		&i.DeletedAt,
		&i.DeletedByID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, username, password, status, created_at, created_by_id, updated_at, updated_by_id, deleted_at, deleted_by_id from users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedAt,
		&i.UpdatedByID,
		&i.DeletedAt,
		&i.DeletedByID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, email, username, password, status, created_at, created_by_id, updated_at, updated_by_id, deleted_at, deleted_by_id from users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedAt,
		&i.UpdatedByID,
		&i.DeletedAt,
		&i.DeletedByID,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET email = $2,
    updated_at = now(),
    updated_by_id = $3
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID          string      `json:"id"`
	Email       string      `json:"email"`
	UpdatedByID pgtype.Text `json:"updated_by_id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email, arg.UpdatedByID)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users
SET status = $2,
    updated_at = now(),
    updated_by_id = $3
WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID          string          `json:"id"`
	Status      UsersStatusEnum `json:"status"`
	UpdatedByID pgtype.Text     `json:"updated_by_id"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.ID, arg.Status, arg.UpdatedByID)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE users
SET username = $2,
    updated_at = now(),
    updated_by_id = $3
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID          string      `json:"id"`
	Username    string      `json:"username"`
	UpdatedByID pgtype.Text `json:"updated_by_id"`
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUserUsername, arg.ID, arg.Username, arg.UpdatedByID)
	return err
}
