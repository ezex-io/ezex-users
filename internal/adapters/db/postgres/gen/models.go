// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserFilesStorageTypeEnum string

const (
	UserFilesStorageTypeEnumLOCAL UserFilesStorageTypeEnum = "LOCAL"
	UserFilesStorageTypeEnumFTP   UserFilesStorageTypeEnum = "FTP"
	UserFilesStorageTypeEnumS3    UserFilesStorageTypeEnum = "S3"
)

func (e *UserFilesStorageTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserFilesStorageTypeEnum(s)
	case string:
		*e = UserFilesStorageTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserFilesStorageTypeEnum: %T", src)
	}
	return nil
}

type NullUserFilesStorageTypeEnum struct {
	UserFilesStorageTypeEnum UserFilesStorageTypeEnum `json:"user_files_storage_type_enum"`
	Valid                    bool                     `json:"valid"` // Valid is true if UserFilesStorageTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserFilesStorageTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserFilesStorageTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserFilesStorageTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserFilesStorageTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserFilesStorageTypeEnum), nil
}

func (e UserFilesStorageTypeEnum) Valid() bool {
	switch e {
	case UserFilesStorageTypeEnumLOCAL,
		UserFilesStorageTypeEnumFTP,
		UserFilesStorageTypeEnumS3:
		return true
	}
	return false
}

func AllUserFilesStorageTypeEnumValues() []UserFilesStorageTypeEnum {
	return []UserFilesStorageTypeEnum{
		UserFilesStorageTypeEnumLOCAL,
		UserFilesStorageTypeEnumFTP,
		UserFilesStorageTypeEnumS3,
	}
}

type UserSettingsThemeEnum string

const (
	UserSettingsThemeEnumLIGHT UserSettingsThemeEnum = "LIGHT"
	UserSettingsThemeEnumDARK  UserSettingsThemeEnum = "DARK"
	UserSettingsThemeEnumAUTO  UserSettingsThemeEnum = "AUTO"
)

func (e *UserSettingsThemeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserSettingsThemeEnum(s)
	case string:
		*e = UserSettingsThemeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UserSettingsThemeEnum: %T", src)
	}
	return nil
}

type NullUserSettingsThemeEnum struct {
	UserSettingsThemeEnum UserSettingsThemeEnum `json:"user_settings_theme_enum"`
	Valid                 bool                  `json:"valid"` // Valid is true if UserSettingsThemeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserSettingsThemeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UserSettingsThemeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserSettingsThemeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserSettingsThemeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserSettingsThemeEnum), nil
}

func (e UserSettingsThemeEnum) Valid() bool {
	switch e {
	case UserSettingsThemeEnumLIGHT,
		UserSettingsThemeEnumDARK,
		UserSettingsThemeEnumAUTO:
		return true
	}
	return false
}

func AllUserSettingsThemeEnumValues() []UserSettingsThemeEnum {
	return []UserSettingsThemeEnum{
		UserSettingsThemeEnumLIGHT,
		UserSettingsThemeEnumDARK,
		UserSettingsThemeEnumAUTO,
	}
}

type UsersStatusEnum string

const (
	UsersStatusEnumPENDING   UsersStatusEnum = "PENDING"
	UsersStatusEnumACTIVE    UsersStatusEnum = "ACTIVE"
	UsersStatusEnumINACTIVE  UsersStatusEnum = "INACTIVE"
	UsersStatusEnumSUSPENDED UsersStatusEnum = "SUSPENDED"
	UsersStatusEnumDELETED   UsersStatusEnum = "DELETED"
)

func (e *UsersStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersStatusEnum(s)
	case string:
		*e = UsersStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersStatusEnum: %T", src)
	}
	return nil
}

type NullUsersStatusEnum struct {
	UsersStatusEnum UsersStatusEnum `json:"users_status_enum"`
	Valid           bool            `json:"valid"` // Valid is true if UsersStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UsersStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersStatusEnum), nil
}

func (e UsersStatusEnum) Valid() bool {
	switch e {
	case UsersStatusEnumPENDING,
		UsersStatusEnumACTIVE,
		UsersStatusEnumINACTIVE,
		UsersStatusEnumSUSPENDED,
		UsersStatusEnumDELETED:
		return true
	}
	return false
}

func AllUsersStatusEnumValues() []UsersStatusEnum {
	return []UsersStatusEnum{
		UsersStatusEnumPENDING,
		UsersStatusEnumACTIVE,
		UsersStatusEnumINACTIVE,
		UsersStatusEnumSUSPENDED,
		UsersStatusEnumDELETED,
	}
}

type File struct {
	ID           string                   `json:"id"`
	UserID       pgtype.Text              `json:"user_id"`
	StorageType  UserFilesStorageTypeEnum `json:"storage_type"`
	Bucket       pgtype.Text              `json:"bucket"`
	ObjectKey    string                   `json:"object_key"`
	ContentType  string                   `json:"content_type"`
	Size         int64                    `json:"size"`
	Category     pgtype.Text              `json:"category"`
	IsPublic     bool                     `json:"is_public"`
	UploadedAt   time.Time                `json:"uploaded_at"`
	UploadedByID pgtype.Text              `json:"uploaded_by_id"`
	UpdatedAt    time.Time                `json:"updated_at"`
	UpdatedByID  pgtype.Text              `json:"updated_by_id"`
	DeletedAt    pgtype.Timestamptz       `json:"deleted_at"`
	DeletedByID  pgtype.Text              `json:"deleted_by_id"`
}

type Permission struct {
	ID          string      `json:"id"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Scope       string      `json:"scope"`
	Action      string      `json:"action"`
}

type Role struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	IsSystem bool   `json:"is_system"`
	// Indicates the default role for new user registrations.
	IsDefault   bool               `json:"is_default"`
	CreatedByID pgtype.Text        `json:"created_by_id"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedByID pgtype.Text        `json:"updated_by_id"`
	UpdatedAt   time.Time          `json:"updated_at"`
	DeletedByID pgtype.Text        `json:"deleted_by_id"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type RolePermission struct {
	RoleID       string `json:"role_id"`
	PermissionID string `json:"permission_id"`
}

type Session struct {
	ID               string      `json:"id"`
	UserID           string      `json:"user_id"`
	RefreshToken     string      `json:"refresh_token"`
	DeviceID         string      `json:"device_id"`
	DeviceName       string      `json:"device_name"`
	Country          pgtype.Text `json:"country"`
	AuthProvider     interface{} `json:"auth_provider"`
	City             pgtype.Text `json:"city"`
	UserAgent        pgtype.Text `json:"user_agent"`
	IpAddress        pgtype.Text `json:"ip_address"`
	IsActive         bool        `json:"is_active"`
	SessionExpiresAt time.Time   `json:"session_expires_at"`
	CreatedAt        time.Time   `json:"created_at"`
}

type User struct {
	ID          string             `json:"id"`
	Email       string             `json:"email"`
	Username    string             `json:"username"`
	Password    pgtype.Text        `json:"password"`
	Status      UsersStatusEnum    `json:"status"`
	CreatedAt   time.Time          `json:"created_at"`
	CreatedByID pgtype.Text        `json:"created_by_id"`
	UpdatedAt   time.Time          `json:"updated_at"`
	UpdatedByID pgtype.Text        `json:"updated_by_id"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	DeletedByID pgtype.Text        `json:"deleted_by_id"`
}

type UserLoginLog struct {
	ID        int64              `json:"id"`
	UserID    pgtype.Text        `json:"user_id"`
	Email     pgtype.Text        `json:"email"`
	IpAddress pgtype.Text        `json:"ip_address"`
	Country   pgtype.Text        `json:"country"`
	City      pgtype.Text        `json:"city"`
	UserAgent pgtype.Text        `json:"user_agent"`
	IsSuccess bool               `json:"is_success"`
	Reason    string             `json:"reason"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type UserProfile struct {
	UserID       string      `json:"user_id"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	AvatarFileID pgtype.Text `json:"avatar_file_id"`
	UpdatedByID  pgtype.Text `json:"updated_by_id"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

type UserRole struct {
	UserID      string    `json:"user_id"`
	RoleID      string    `json:"role_id"`
	GrantedByID string    `json:"granted_by_id"`
	GrantedAt   time.Time `json:"granted_at"`
}

type UserSetting struct {
	UserID    string                `json:"user_id"`
	Language  string                `json:"language"`
	Theme     UserSettingsThemeEnum `json:"theme"`
	Timezone  pgtype.Text           `json:"timezone"`
	UpdatedAt time.Time             `json:"updated_at"`
}
